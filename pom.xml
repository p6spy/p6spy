<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.sonatype.oss</groupId>
    <artifactId>oss-parent</artifactId>
    <version>7</version>
  </parent>
  <packaging>jar</packaging>

  <groupId>p6spy</groupId>
  <artifactId>p6spy</artifactId>
  <name>P6Spy</name>
  <version>3.0.0</version>
  <organization>
    <name>P6Spy</name>
  </organization>
  <inceptionYear>2002</inceptionYear>
  <description>
    P6Spy is a framework that enables database activity to be seamlessly intercepted and logged with no code changes to
    existing applications.
  </description>

  <url>http://p6spy.github.io/p6spy/</url>

  <mailingLists>
    <mailingList>
      <name>Developer List</name>
      <post>p6spy-developers@googlegroups.com</post>
      <subscribe>http://groups.google.com/group/p6spy-developers</subscribe>
      <unsubscribe>http://groups.google.com/group/p6spy-developers</unsubscribe>
      <archive>http://groups.google.com/group/p6spy-developers</archive>
    </mailingList>
    <mailingList>
      <name>User's List</name>
      <post>p6spy-users@googlegroups.com</post>
      <subscribe>http://groups.google.com/group/p6spy-users</subscribe>
      <unsubscribe>http://groups.google.com/group/p6spy-users</unsubscribe>
      <archive>http://groups.google.com/group/p6spy-users</archive>
    </mailingList>
  </mailingLists>

  <issueManagement>
    <system>github</system>
    <url>http://github.com/p6spy/p6spy/issues#issue/</url>
  </issueManagement>

  <ciManagement>
    <url>https://travis-ci.org/p6spy/p6spy</url>
    <system>Travis CI</system>
  </ciManagement>

  <licenses>
    <license>
      <name>Apache License, Version 2.0</name>
      <url>https://raw.github.com/p6spy/p6spy/master/license.txt</url>
    </license>
  </licenses>

  <scm>
    <url>https://github.com/p6spy/p6spy/</url>
    <connection>scm:git:https://github.com/p6spy/p6spy.git</connection>
    <developerConnection>scm:git:https://github.com/p6spy/p6spy.git</developerConnection>
    <tag>HEAD</tag>
  </scm>

  <properties>
    <java-build>1.6</java-build>
    <commons-logging-build>1.1</commons-logging-build>
    <slf4j-build>1.7.7</slf4j-build>
    <log4j-build>1.2.17</log4j-build>
    <log4j2-build>2.0-rc1</log4j2-build>
    <logback-build>1.1.2</logback-build>
    <mysql-connector-java-build>5.1.21</mysql-connector-java-build>
    <!-- please note we use jdbc type 3 here, to prove in tests it works for us, see: https://github.com/p6spy/p6spy/issues/30 -->
    <postgresql-build>9.3-1100-jdbc41</postgresql-build>
    <hsqldb-build>2.3.1</hsqldb-build>
    <h2-build>1.3.173</h2-build>
    <derby-build>10.10.1.1</derby-build>
    <sqlite-build>3.7.2</sqlite-build>
    <jacoco-maven-plugin-build>0.7.7.201606060606</jacoco-maven-plugin-build>
    <coveralls-maven-plugin-build>4.2.0</coveralls-maven-plugin-build>
    <maven-surefire-plugin-build>2.17</maven-surefire-plugin-build>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.version>3.0.4</maven.version>
    <sonar.host.url>http://nemo.sonarqube.org/</sonar.host.url>
  </properties>

  <prerequisites>
    <maven>${maven.version}</maven>
  </prerequisites>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven-surefire-plugin-build}</version>
        <configuration>
          <systemPropertyVariables>
            <user.language>en_US</user.language>
            <derby.stream.error.file>target/derby.log</derby.stream.error.file>
          </systemPropertyVariables>
          <!-- to make jacoco happy -->
          <!-- to enable remote JMX testing, 
            	see: http://stackoverflow.com/questions/5552960/how-to-connect-to-a-java-program-on-localhost-jvm-using-jmx -->
          <!-- to workaround oracle timezone issue: http://stackoverflow.com/questions/9156379/ora-01882-timezone-region-not-found -->
          <!-- to get rid of DB2 traces => -Ddb2.jcc.override.traceLevel=0
            see: http://publib.boulder.ibm.com/infocenter/idshelp/v111/index.jsp?topic=/com.ibm.jccids.doc/com.ibm.db2.luw.apdv.java.doc/doc/r0052075.htm -->
          <argLine>
            ${argLine} 
            -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false
            -Dcom.sun.management.jmxremote.port=1234 -Dcom.sun.management.jmxremote.ssl=false
            -Doracle.jdbc.timezoneAsRegion=false -Ddb2.jcc.override.traceLevel=0
          </argLine>
          <includes>
            <include>**/P6Test*.java</include>
            <include>**/*Test.java</include>
          </includes>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>1.3.1</version>
        <executions>
          <execution>
            <id>enforce-java</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireJavaVersion>
                  <!-- require Java 1.7 or later for the build -->
                  <version>(1.7,)</version>
                </requireJavaVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.1</version>
        <configuration>
          <source>${java-build}</source>
          <target>${java-build}</target>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${jacoco-maven-plugin-build}</version>
          <executions>
            <execution>
                <id>prepare-agent</id>
                <goals>
                    <goal>prepare-agent</goal>
                </goals>
            </execution>
        </executions>
      </plugin>

      <plugin>
          <groupId>org.eluder.coveralls</groupId>
          <artifactId>coveralls-maven-plugin</artifactId>
          <version>${coveralls-maven-plugin-build}</version>
      </plugin>

      <plugin>
        <!-- 
        The jar plugin is listed simply to force the execution order
        with the other plugins executing in the package phase
        -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>2.4</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>2.9</version>
        <configuration>
          <quiet>true</quiet>
          <additionalparam>-Xdoclint:none</additionalparam>
        </configuration>
        <executions>
          <execution>
            <id>attach-javadocs</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>2.2.1</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <phase>package</phase>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-release-plugin</artifactId>
        <version>2.4.1</version>
        <configuration>
          <!-- required to prevent gpg plugin from hanging
             http://jira.codehaus.org/browse/MGPG-9  -->
          <mavenExecutorId>forked-path</mavenExecutorId>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>2.4</version>
        <executions>
          <execution>
            <id>nodep</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <appendAssemblyId>true</appendAssemblyId>
              <descriptors>
                <descriptor>src/main/assembly/log4j2-nodep.xml</descriptor>
                <descriptor>src/main/assembly/log4j-nodep.xml</descriptor>
                <descriptor>src/main/assembly/logback-nodep.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
          <execution>
            <id>distribution</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <appendAssemblyId>false</appendAssemblyId>
              <descriptors>
                <descriptor>src/main/assembly/distribution.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>license-maven-plugin</artifactId>
        <executions>
          <!-- generate license headers automatically -->
          <execution>
            <id>update licenses</id>
            <goals>
              <goal>update-file-header</goal>
            </goals>
            <phase>process-resources</phase>
            <configuration>
              <failOnMissingHeader>false</failOnMissingHeader>
              <failOnNotUptodateHeader>false</failOnNotUptodateHeader>
            </configuration>
          </execution>
        </executions>
      </plugin>

    </plugins>

    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>license-maven-plugin</artifactId>
          <version>1.5</version>
          <configuration>
            <addSvnKeyWords>false</addSvnKeyWords>
            <addJavaLicenseAfterPackage>false</addJavaLicenseAfterPackage>
            <failOnMissingHeader>true</failOnMissingHeader>
            <failOnNotUptodateHeader>true</failOnNotUptodateHeader>
            <licenseName>apache_v2</licenseName>
            <roots>
              <root>src/main/assembly</root>
              <root>src/main/java</root>
              <root>src/main/resources</root>
              <root>src/test/java</root>
              <root>src/test/resources</root>
            </roots>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>

  <!-- 
  for providing misc *-nodep artifacts, please note that order matters here
  even if slf4j complains about multiple implementations on classpath, it takes the 1.st one
  and as we use log4j in tests => bridge needs to be the 1.st one specified 
   -->
  <dependencies>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${slf4j-build}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <version>1.7.5</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <version>${log4j-build}</version>
      <scope>provided</scope>
      <exclusions>
        <!-- dependencies show up in 1.2.15 -->
        <exclusion>
          <groupId>com.sun.jmx</groupId>
          <artifactId>jmxri</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.sun.jdmk</groupId>
          <artifactId>jmxtools</artifactId>
        </exclusion>
        <exclusion>
          <groupId>javax.jms</groupId>
          <artifactId>jms</artifactId>
        </exclusion>
        <exclusion>
          <groupId>javax.mail</groupId>
          <artifactId>mail</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-slf4j-impl</artifactId>
      <version>${log4j2-build}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-api</artifactId>
      <version>${log4j2-build}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
      <version>${log4j2-build}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${logback-build}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-core</artifactId>
      <version>${logback-build}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
      <version>4.11</version>
    </dependency>
    <dependency>
      <!-- data source testing through JNDI -->
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-plus</artifactId>
      <version>8.1.7.v20120910</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <!-- data source testing -->
      <groupId>commons-dbcp</groupId>
      <artifactId>commons-dbcp</artifactId>
      <version>1.4</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.tomcat</groupId>
      <artifactId>tomcat-jdbc</artifactId>
      <version>8.5.6</version>
      <scope>test</scope>
    </dependency>
    <!-- xa datasource testing  -->
    <dependency>
      <groupId>org.codehaus.btm</groupId>
      <artifactId>btm</artifactId>
      <version>2.1.4</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-exec</artifactId>
      <version>1.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.geronimo.specs</groupId>
      <artifactId>geronimo-jta_1.1_spec</artifactId>
      <version>1.1.1</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.liquibase</groupId>
      <artifactId>liquibase-core</artifactId>
      <version>3.0.8</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.mattbertolini</groupId>
      <artifactId>liquibase-slf4j</artifactId>
      <version>1.2.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-jdbc</artifactId>
      <version>3.2.4.RELEASE</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>3.2.4.RELEASE</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <!-- jmx testing -->
      <groupId>com.j256.simplejmx</groupId>
      <artifactId>simplejmx</artifactId>
      <version>1.1</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>2.4</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>3.3.2</version>
      <scope>test</scope>
    </dependency>

    <!-- needed for testing, let's prevent users from needing modify their settings.xml just for the project build -->
    <dependency>
      <groupId>p6spy</groupId>
      <artifactId>p6spy-signedjar-test</artifactId>
      <version>1.0.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>commons-beanutils</groupId>
      <artifactId>commons-beanutils</artifactId>
      <version>1.9.1</version>
      <scope>test</scope>
    </dependency>

    <!-- all the JDBC drivers tested -->
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>${mysql-connector-java-build}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <version>${postgresql-build}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hsqldb</groupId>
      <artifactId>hsqldb</artifactId>
      <version>${hsqldb-build}</version>
      <classifier>jdk6debug</classifier>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <version>${h2-build}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <!-- Note: This is a type 3 driver! -->
      <groupId>org.xerial</groupId>
      <artifactId>sqlite-jdbc</artifactId>
      <version>${sqlite-build}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.derby</groupId>
      <artifactId>derby</artifactId>
      <version>${derby-build}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <!-- Note: they claim this to be type 4.1 driver -->
      <groupId>org.firebirdsql.jdbc</groupId>
      <artifactId>jaybird-jdk17</artifactId>
      <version>2.2.3</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>2.7.22</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <profiles>
    <profile>
      <id>release-sign-artifacts</id>
      <activation>
        <property>
          <name>performRelease</name>
          <value>true</value>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-gpg-plugin</artifactId>
            <version>1.4</version>
            <executions>
              <execution>
                <id>sign-artifacts</id>
                <phase>verify</phase>
                <goals>
                  <goal>sign</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

        </plugins>
      </build>
    </profile>
    <profile>
      <id>defaultDB</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <systemPropertyVariables>
                <!-- can be started with any DBs to test for, like: "-DDB=H2,HSQLDB" however if none specified, default is H2
                however keep in mind that some tests run with preconfigured drivers (i.e. multidriver, ...)-->
                <DB>${env.DB}</DB>
              </systemPropertyVariables>
              <!-- signed jar proxing -->
              <additionalClasspathElements>
                <additionalClasspathElement>${project.build.directory}/test-classes/p6spy-signedjar-test-1.0.0.jar
                </additionalClasspathElement>
              </additionalClasspathElements>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>travis</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <systemPropertyVariables>
                <!-- all the DBs we want to test with -->
                <!-- <DB>PostgreSQL,MySQL,H2,HSQLDB,SQLite,Firebird,Derby,DB2,Oracle</DB> -->
                <DB>PostgreSQL,MySQL,H2,HSQLDB,SQLite,Firebird,Derby,Oracle</DB>
              </systemPropertyVariables>

              <!-- signed jar proxing -->
              <additionalClasspathElements>
                <additionalClasspathElement>
                  ${project.build.directory}/test-classes/p6spy-signedjar-test-1.0.0.jar
                </additionalClasspathElement>
              </additionalClasspathElements>
            </configuration>
          </plugin>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>license-maven-plugin</artifactId>
            <executions>
              <!-- check/force licenses on travis only (too late for modifications)
                moreover let's do it prior to "process-resources" phase - as that's where we generate these
                to make sure developer introducing new file, took care of this on his/her local machine -->
              <execution>
                <id>check licenses</id>
                <goals>
                  <goal>check-file-header</goal>
                </goals>
                <phase>generate-resources</phase>
                <configuration>
                  <failOnMissingHeader>true</failOnMissingHeader>
                  <failOnNotUptodateHeader>true</failOnNotUptodateHeader>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <dependencies>
        <!-- please note these are manually imported to local maven repo in scripts/travis/before_install_db2.sh -->
        <!--  		<dependency>
              <groupId>com.ibm.db2</groupId>
                  <artifactId>db2jcc4</artifactId>
                  <version>9.7</version>
                  <scope>test</scope>
            </dependency>
                <dependency>
              <groupId>com.ibm.db2</groupId>
                  <artifactId>db2jcc_license_cu</artifactId>
                  <version>9.7</version>
                  <scope>test</scope>
            </dependency>
         -->
        <!-- fetched from the cloudbees maven repo -->
        <dependency>
          <groupId>com.oracle</groupId>
          <artifactId>ojdbc6</artifactId>
          <version>11.2.0.4</version>
          <scope>test</scope>
        </dependency>
      </dependencies>
    </profile>

  </profiles>

  <repositories>
    <repository>
      <id>P6SpyProjectLocalRepo</id>
      <name>p6spy Project Local Repository</name>
      <url>file://${project.basedir}/src/test/resources</url>
    </repository>
  </repositories>
</project>
